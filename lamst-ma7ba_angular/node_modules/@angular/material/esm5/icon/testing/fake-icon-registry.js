/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Injectable, NgModule } from '@angular/core';
import { MatIconRegistry } from '@angular/material/icon';
import { of as observableOf } from 'rxjs';
// tslint:enable:no-any
/**
 * A null icon registry that must be imported to allow disabling of custom
 * icons.
 */
import * as ɵngcc0 from '@angular/core';
var FakeMatIconRegistry = /** @class */ (function () {
    function FakeMatIconRegistry() {
    }
    FakeMatIconRegistry.prototype.addSvgIcon = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.addSvgIconLiteral = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.addSvgIconInNamespace = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.addSvgIconLiteralInNamespace = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.addSvgIconSet = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.addSvgIconSetLiteral = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.addSvgIconSetInNamespace = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.addSvgIconSetLiteralInNamespace = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.registerFontClassAlias = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.classNameForFontAlias = function (alias) {
        return alias;
    };
    FakeMatIconRegistry.prototype.getDefaultFontSetClass = function () {
        return 'material-icons';
    };
    FakeMatIconRegistry.prototype.getSvgIconFromUrl = function () {
        return observableOf(this._generateEmptySvg());
    };
    FakeMatIconRegistry.prototype.getNamedSvgIcon = function () {
        return observableOf(this._generateEmptySvg());
    };
    FakeMatIconRegistry.prototype.setDefaultFontSetClass = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.ngOnDestroy = function () { };
    FakeMatIconRegistry.prototype._generateEmptySvg = function () {
        var emptySvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        emptySvg.classList.add('fake-testing-svg');
        // Emulate real icon characteristics from `MatIconRegistry` so size remains consistent in tests.
        emptySvg.setAttribute('fit', '');
        emptySvg.setAttribute('height', '100%');
        emptySvg.setAttribute('width', '100%');
        emptySvg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
        emptySvg.setAttribute('focusable', 'false');
        return emptySvg;
    };
FakeMatIconRegistry.ɵfac = function FakeMatIconRegistry_Factory(t) { return new (t || FakeMatIconRegistry)(); };
FakeMatIconRegistry.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FakeMatIconRegistry, factory: function (t) { return FakeMatIconRegistry.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FakeMatIconRegistry, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return FakeMatIconRegistry;
}());
export { FakeMatIconRegistry };
/** Import this module in tests to install the null icon registry. */
var MatIconTestingModule = /** @class */ (function () {
    function MatIconTestingModule() {
    }
MatIconTestingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatIconTestingModule });
MatIconTestingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatIconTestingModule_Factory(t) { return new (t || MatIconTestingModule)(); }, providers: [{ provide: MatIconRegistry, useClass: FakeMatIconRegistry }] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIconTestingModule, [{
        type: NgModule,
        args: [{
                providers: [{ provide: MatIconRegistry, useClass: FakeMatIconRegistry }]
            }]
    }], function () { return []; }, null); })();
    return MatIconTestingModule;
}());
export { MatIconTestingModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,