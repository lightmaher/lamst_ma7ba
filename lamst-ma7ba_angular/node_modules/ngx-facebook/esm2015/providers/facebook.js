import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @shortdesc
 * Angular 2 service to inject to use Facebook's SDK
 * @description
 * You only need to inject this service in your application if you aren't using [`FacebookModule`](../facebook-module).
 * @usage
 * ```typescript
 * import { FacebookService, InitParams } from 'ngx-facebook-sdk';
 *
 * constructor(private fb: FacebookService) {
 *
 *   const params: InitParams = {
 *
 *   };
 *
 *   fb.init(params);
 *
 * }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
let FacebookService = class FacebookService {
    /**
     * This method is used to initialize and setup the SDK.
     * @param params {InitParams} Initialization parameters
     * @returns {Promise<any>}
     */
    init(params) {
        try {
            return Promise.resolve(FB.init(params));
        }
        catch (e) {
            return Promise.reject(e);
        }
    }
    /**
     * This method lets you make calls to the Graph API
     * @usage
     * ```typescript
     * this.fb.api('somepath')
     *   .then(res => console.log(res))
     *   .catch(e => console.log(e));
     * ```
     * @param path {string} The Graph API endpoint path that you want to call.
     * @param [method=get] {string} The HTTP method that you want to use for the API request.
     * @param [params] {Object} An object consisting of any parameters that you want to pass into your Graph API call.
     * @returns {Promise<any>}
     */
    api(path, method = 'get', params = {}) {
        return new Promise((resolve, reject) => {
            try {
                FB.api(path, method, params, (response) => {
                    if (!response) {
                        reject();
                    }
                    else if (response.error) {
                        reject(response.error);
                    }
                    else {
                        resolve(response);
                    }
                });
            }
            catch (e) {
                reject(e);
            }
        });
    }
    /**
     * This method is used to trigger different forms of Facebook created UI dialogs.
     * These dialogs include:
     * - Share dialog
     * - Login dialog
     * - Add page tab dialog
     * - Requests dialog
     * - Send dialog
     * - Payments dialog
     * - Go Live dialog
     * @param params {UIParams} A collection of parameters that control which dialog is loaded, and relevant settings.
     * @returns {Promise<UIResponse>}
     */
    ui(params) {
        return new Promise((resolve, reject) => {
            try {
                FB.ui(params, (response) => {
                    if (!response)
                        reject();
                    else if (response.error)
                        reject(response.error);
                    else
                        resolve(response);
                });
            }
            catch (e) {
                reject(e);
            }
        });
    }
    /**
     * This method allows you to determine if a user is logged in to Facebook and has authenticated your app.
     * @param [forceFreshResponse=false] {boolean} Force a fresh response.
     * @returns {Promise<LoginStatus>}
     */
    getLoginStatus(forceFreshResponse) {
        return new Promise((resolve, reject) => {
            try {
                FB.getLoginStatus((response) => {
                    if (!response) {
                        reject();
                    }
                    else {
                        resolve(response);
                    }
                }, forceFreshResponse);
            }
            catch (e) {
                reject(e);
            }
        });
    }
    /**
     * Login the user
     * @usage
     * ```typescript
     * // login without options
     * this.fb.login()
     *   .then((response: LoginResponse) => console.log('Logged in', response))
     *   .catch(e => console.error('Error logging in'));
     *
     * // login with options
     * const options: LoginOptions = {
     *   scope: 'public_profile,user_friends,email,pages_show_list',
     *   return_scopes: true,
     *   enable_profile_selector: true
     * };
     * this.fb.login(options)
     *   .then(...)
     *   .catch(...);
     * ```
     * @param [options] {LoginOptions} Login options
     * @returns {Promise<LoginResponse>} returns a promise that resolves with [LoginResponse](../login-response) object, or rejects with an error
     */
    login(options) {
        return new Promise((resolve, reject) => {
            try {
                FB.login((response) => {
                    if (response.authResponse) {
                        resolve(response);
                    }
                    else {
                        reject();
                    }
                }, options);
            }
            catch (e) {
                reject(e);
            }
        });
    }
    /**
     * Logout the user
     * @usage
     * ```typescript
     * this.fb.logout().then(() => console.log('Logged out!'));
     * ```
     * @returns {Promise<any>} returns a promise that resolves when the user is logged out
     */
    logout() {
        return new Promise((resolve, reject) => {
            try {
                FB.logout((response) => {
                    resolve(response);
                });
            }
            catch (e) {
                reject(e);
            }
        });
    }
    /**
     * This synchronous function returns back the current authResponse.
     * @usage
     * ```typescript
     * import { AuthResponse, FacebookService } from 'ngx-facebook-sdk';
     *
     * ...
     *
     * const authResponse: AuthResponse = this.fb.getAuthResponse();
     * ```
     * @returns {AuthResponse} returns an [AuthResponse](../auth-response) object
     */
    getAuthResponse() {
        try {
            return FB.getAuthResponse();
        }
        catch (e) {
            console.error('ngx-facebook-sdk: ', e);
        }
    }
};
FacebookService.ɵfac = function FacebookService_Factory(t) { return new (t || FacebookService)(); };
FacebookService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FacebookService_Factory() { return new FacebookService(); }, token: FacebookService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FacebookService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();
export { FacebookService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjZWJvb2suanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtZmFjZWJvb2svcHJvdmlkZXJzL2ZhY2Vib29rLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDO0FBZUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUlILElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7QUFDNUIsSUFDRTtBQUNGO0FBQ0U7QUFDRTtBQUVKLE9BREs7QUFDTCxJQUFFLElBQUksQ0FBQyxNQUFrQjtBQUFJLFFBQ3pCLElBQUk7QUFDUixZQUFNLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDOUMsU0FBSztBQUFDLFFBQUEsT0FBTyxDQUFDLEVBQUU7QUFDaEIsWUFBTSxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFO0FBQ0U7QUFDRTtBQUNFO0FBQ0U7QUFFUDtBQUFXO0FBQ0U7QUFDRTtBQUNFO0FBRUosT0FEWDtBQUNMLElBQUUsR0FBRyxDQUFDLElBQVksRUFBRSxTQUFvQixLQUFLLEVBQUUsU0FBYyxFQUFFO0FBQUksUUFDL0QsT0FBTyxJQUFJLE9BQU8sQ0FBTSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtBQUNoRCxZQUNNLElBQUk7QUFDVixnQkFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsUUFBYSxFQUFFLEVBQUU7QUFDdkQsb0JBQVUsSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUN6Qix3QkFBWSxNQUFNLEVB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WSxlQUFlO0FBRTVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXV0aFJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL2F1dGgtcmVzcG9uc2UnO1xuaW1wb3J0IHsgSW5pdFBhcmFtcyB9IGZyb20gJy4uL21vZGVscy9pbml0LXBhcmFtcyc7XG5pbXBvcnQgeyBMb2dpbk9wdGlvbnMgfSBmcm9tICcuLi9tb2RlbHMvbG9naW4tb3B0aW9ucyc7XG5pbXBvcnQgeyBMb2dpblJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL2xvZ2luLXJlc3BvbnNlJztcbmltcG9ydCB7IExvZ2luU3RhdHVzIH0gZnJvbSAnLi4vbW9kZWxzL2xvZ2luLXN0YXR1cyc7XG5pbXBvcnQgeyBVSVBhcmFtcyB9IGZyb20gJy4uL21vZGVscy91aS1wYXJhbXMnO1xuaW1wb3J0IHsgVUlSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy91aS1yZXNwb25zZSc7XG5cbmRlY2xhcmUgdmFyIEZCOiBhbnk7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgdHlwZSBBcGlNZXRob2QgPSAnZ2V0JyB8ICdwb3N0JyB8ICdkZWxldGUnO1xuXG4vKipcbiAqIEBzaG9ydGRlc2NcbiAqIEFuZ3VsYXIgMiBzZXJ2aWNlIHRvIGluamVjdCB0byB1c2UgRmFjZWJvb2sncyBTREtcbiAqIEBkZXNjcmlwdGlvblxuICogWW91IG9ubHkgbmVlZCB0byBpbmplY3QgdGhpcyBzZXJ2aWNlIGluIHlvdXIgYXBwbGljYXRpb24gaWYgeW91IGFyZW4ndCB1c2luZyBbYEZhY2Vib29rTW9kdWxlYF0oLi4vZmFjZWJvb2stbW9kdWxlKS5cbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgRmFjZWJvb2tTZXJ2aWNlLCBJbml0UGFyYW1zIH0gZnJvbSAnbmd4LWZhY2Vib29rLXNkayc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBmYjogRmFjZWJvb2tTZXJ2aWNlKSB7XG4gKlxuICogICBjb25zdCBwYXJhbXM6IEluaXRQYXJhbXMgPSB7XG4gKlxuICogICB9O1xuICpcbiAqICAgZmIuaW5pdChwYXJhbXMpO1xuICpcbiAqIH1cbiAqIGBgYFxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBGYWNlYm9va1NlcnZpY2Uge1xuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIGluaXRpYWxpemUgYW5kIHNldHVwIHRoZSBTREsuXG4gICAqIEBwYXJhbSBwYXJhbXMge0luaXRQYXJhbXN9IEluaXRpYWxpemF0aW9uIHBhcmFtZXRlcnNcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIGluaXQocGFyYW1zOiBJbml0UGFyYW1zKTogUHJvbWlzZTxhbnk+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShGQi5pbml0KHBhcmFtcykpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgbGV0cyB5b3UgbWFrZSBjYWxscyB0byB0aGUgR3JhcGggQVBJXG4gICAqIEB1c2FnZVxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIHRoaXMuZmIuYXBpKCdzb21lcGF0aCcpXG4gICAqICAgLnRoZW4ocmVzID0+IGNvbnNvbGUubG9nKHJlcykpXG4gICAqICAgLmNhdGNoKGUgPT4gY29uc29sZS5sb2coZSkpO1xuICAgKiBgYGBcbiAgICogQHBhcmFtIHBhdGgge3N0cmluZ30gVGhlIEdyYXBoIEFQSSBlbmRwb2ludCBwYXRoIHRoYXQgeW91IHdhbnQgdG8gY2FsbC5cbiAgICogQHBhcmFtIFttZXRob2Q9Z2V0XSB7c3RyaW5nfSBUaGUgSFRUUCBtZXRob2QgdGhhdCB5b3Ugd2FudCB0byB1c2UgZm9yIHRoZSBBUEkgcmVxdWVzdC5cbiAgICogQHBhcmFtIFtwYXJhbXNdIHtPYmplY3R9IEFuIG9iamVjdCBjb25zaXN0aW5nIG9mIGFueSBwYXJhbWV0ZXJzIHRoYXQgeW91IHdhbnQgdG8gcGFzcyBpbnRvIHlvdXIgR3JhcGggQVBJIGNhbGwuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBhcGkocGF0aDogc3RyaW5nLCBtZXRob2Q6IEFwaU1ldGhvZCA9ICdnZXQnLCBwYXJhbXM6IGFueSA9IHt9KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8YW55PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIEZCLmFwaShwYXRoLCBtZXRob2QsIHBhcmFtcywgKHJlc3BvbnNlOiBhbnkpID0+IHtcbiAgICAgICAgICBpZiAoIXJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgICAgICByZWplY3QocmVzcG9uc2UuZXJyb3IpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIHRyaWdnZXIgZGlmZmVyZW50IGZvcm1zIG9mIEZhY2Vib29rIGNyZWF0ZWQgVUkgZGlhbG9ncy5cbiAgICogVGhlc2UgZGlhbG9ncyBpbmNsdWRlOlxuICAgKiAtIFNoYXJlIGRpYWxvZ1xuICAgKiAtIExvZ2luIGRpYWxvZ1xuICAgKiAtIEFkZCBwYWdlIHRhYiBkaWFsb2dcbiAgICogLSBSZXF1ZXN0cyBkaWFsb2dcbiAgICogLSBTZW5kIGRpYWxvZ1xuICAgKiAtIFBheW1lbnRzIGRpYWxvZ1xuICAgKiAtIEdvIExpdmUgZGlhbG9nXG4gICAqIEBwYXJhbSBwYXJhbXMge1VJUGFyYW1zfSBBIGNvbGxlY3Rpb24gb2YgcGFyYW1ldGVycyB0aGF0IGNvbnRyb2wgd2hpY2ggZGlhbG9nIGlzIGxvYWRlZCwgYW5kIHJlbGV2YW50IHNldHRpbmdzLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxVSVJlc3BvbnNlPn1cbiAgICovXG4gIHVpKHBhcmFtczogVUlQYXJhbXMpOiBQcm9taXNlPFVJUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8YW55PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIEZCLnVpKHBhcmFtcywgKHJlc3BvbnNlOiBhbnkpID0+IHtcbiAgICAgICAgICBpZighcmVzcG9uc2UpIHJlamVjdCgpO1xuICAgICAgICAgIGVsc2UgaWYocmVzcG9uc2UuZXJyb3IpIHJlamVjdChyZXNwb25zZS5lcnJvcik7XG4gICAgICAgICAgZWxzZSByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cblxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGFsbG93cyB5b3UgdG8gZGV0ZXJtaW5lIGlmIGEgdXNlciBpcyBsb2dnZWQgaW4gdG8gRmFjZWJvb2sgYW5kIGhhcyBhdXRoZW50aWNhdGVkIHlvdXIgYXBwLlxuICAgKiBAcGFyYW0gW2ZvcmNlRnJlc2hSZXNwb25zZT1mYWxzZV0ge2Jvb2xlYW59IEZvcmNlIGEgZnJlc2ggcmVzcG9uc2UuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPExvZ2luU3RhdHVzPn1cbiAgICovXG4gIGdldExvZ2luU3RhdHVzKGZvcmNlRnJlc2hSZXNwb25zZT86IGJvb2xlYW4pOiBQcm9taXNlPExvZ2luU3RhdHVzPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPExvZ2luU3RhdHVzPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIEZCLmdldExvZ2luU3RhdHVzKChyZXNwb25zZTogTG9naW5TdGF0dXMpID0+IHtcbiAgICAgICAgICBpZiAoIXJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBmb3JjZUZyZXNoUmVzcG9uc2UpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dpbiB0aGUgdXNlclxuICAgKiBAdXNhZ2VcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiAvLyBsb2dpbiB3aXRob3V0IG9wdGlvbnNcbiAgICogdGhpcy5mYi5sb2dpbigpXG4gICAqICAgLnRoZW4oKHJlc3BvbnNlOiBMb2dpblJlc3BvbnNlKSA9PiBjb25zb2xlLmxvZygnTG9nZ2VkIGluJywgcmVzcG9uc2UpKVxuICAgKiAgIC5jYXRjaChlID0+IGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvZ2dpbmcgaW4nKSk7XG4gICAqXG4gICAqIC8vIGxvZ2luIHdpdGggb3B0aW9uc1xuICAgKiBjb25zdCBvcHRpb25zOiBMb2dpbk9wdGlvbnMgPSB7XG4gICAqICAgc2NvcGU6ICdwdWJsaWNfcHJvZmlsZSx1c2VyX2ZyaWVuZHMsZW1haWwscGFnZXNfc2hvd19saXN0JyxcbiAgICogICByZXR1cm5fc2NvcGVzOiB0cnVlLFxuICAgKiAgIGVuYWJsZV9wcm9maWxlX3NlbGVjdG9yOiB0cnVlXG4gICAqIH07XG4gICAqIHRoaXMuZmIubG9naW4ob3B0aW9ucylcbiAgICogICAudGhlbiguLi4pXG4gICAqICAgLmNhdGNoKC4uLik7XG4gICAqIGBgYFxuICAgKiBAcGFyYW0gW29wdGlvbnNdIHtMb2dpbk9wdGlvbnN9IExvZ2luIG9wdGlvbnNcbiAgICogQHJldHVybnMge1Byb21pc2U8TG9naW5SZXNwb25zZT59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBbTG9naW5SZXNwb25zZV0oLi4vbG9naW4tcmVzcG9uc2UpIG9iamVjdCwgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yXG4gICAqL1xuICBsb2dpbihvcHRpb25zPzogTG9naW5PcHRpb25zKTogUHJvbWlzZTxMb2dpblJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPExvZ2luUmVzcG9uc2U+KChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgRkIubG9naW4oKHJlc3BvbnNlOiBMb2dpblJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3BvbnNlLmF1dGhSZXNwb25zZSkge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIG9wdGlvbnMpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dvdXQgdGhlIHVzZXJcbiAgICogQHVzYWdlXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogdGhpcy5mYi5sb2dvdXQoKS50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdMb2dnZWQgb3V0IScpKTtcbiAgICogYGBgXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgdXNlciBpcyBsb2dnZWQgb3V0XG4gICAqL1xuICBsb2dvdXQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8YW55PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIEZCLmxvZ291dCgocmVzcG9uc2U6IGFueSkgPT4ge1xuICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBzeW5jaHJvbm91cyBmdW5jdGlvbiByZXR1cm5zIGJhY2sgdGhlIGN1cnJlbnQgYXV0aFJlc3BvbnNlLlxuICAgKiBAdXNhZ2VcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBpbXBvcnQgeyBBdXRoUmVzcG9uc2UsIEZhY2Vib29rU2VydmljZSB9IGZyb20gJ25neC1mYWNlYm9vay1zZGsnO1xuICAgKlxuICAgKiAuLi5cbiAgICpcbiAgICogY29uc3QgYXV0aFJlc3BvbnNlOiBBdXRoUmVzcG9uc2UgPSB0aGlzLmZiLmdldEF1dGhSZXNwb25zZSgpO1xuICAgKiBgYGBcbiAgICogQHJldHVybnMge0F1dGhSZXNwb25zZX0gcmV0dXJucyBhbiBbQXV0aFJlc3BvbnNlXSguLi9hdXRoLXJlc3BvbnNlKSBvYmplY3RcbiAgICovXG4gIGdldEF1dGhSZXNwb25zZSgpOiBBdXRoUmVzcG9uc2Uge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gPEF1dGhSZXNwb25zZT5GQi5nZXRBdXRoUmVzcG9uc2UoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCduZ3gtZmFjZWJvb2stc2RrOiAnLCBlKTtcbiAgICB9XG4gIH1cblxufVxuIl19