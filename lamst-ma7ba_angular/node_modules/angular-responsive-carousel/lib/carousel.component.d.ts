import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, SimpleChanges } from '@angular/core';
import { Images } from './interfaces';
import * as ɵngcc0 from '@angular/core';
export declare class CarouselComponent implements OnDestroy {
    private elementRef;
    private ref;
    get isContainerLocked(): any;
    get slideCounter(): any;
    get previousSlideCounter(): any;
    get lapCounter(): any;
    lineUpCells(): void;
    quicklyPositionContainer(): void;
    _id: string;
    _images: Images;
    touches: any;
    carousel: any;
    landscapeMode: any;
    minTimeout: number;
    isVideoPlaying: boolean;
    _isCounter: boolean;
    _width: number;
    _cellWidth: number | '100%';
    isMoving: boolean;
    isNgContent: boolean;
    cellLength: number;
    dotsArr: any;
    get isLandscape(): boolean;
    get isSafari(): any;
    get counter(): string;
    get cellsElement(): any;
    set images(images: Images & any);
    get images(): Images & any;
    events: EventEmitter<any>;
    height: number;
    width: number;
    loop: boolean;
    autoplay: boolean;
    autoplayInterval: number;
    pauseOnHover: boolean;
    dots: boolean;
    borderRadius: number;
    margin: number;
    objectFit: 'contain' | 'cover' | 'none';
    minSwipeDistance: number;
    transitionDuration: number;
    transitionTimingFunction: 'ease' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'linear';
    videoProperties: any;
    counterSeparator: string;
    overflowCellsLimit: number;
    listeners: 'auto' | 'mouse and touch';
    cellsToShow: number;
    cellsToScroll: number;
    set cellWidth(value: number | '100%');
    set isCounter(value: boolean);
    get isCounter(): boolean;
    get activeDotIndex(): number;
    arrows: boolean;
    arrowsOutside: boolean;
    arrowsTheme: 'light' | 'dark';
    get cellLimit(): any;
    hostClassCarousel: boolean;
    hostStyleHeight: string;
    hostStyleWidth: string;
    onWindowResize(event: any): void;
    onMousemove(event: MouseEvent): void;
    onMouseleave(event: MouseEvent): void;
    constructor(elementRef: ElementRef, ref: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    initCarousel(): void;
    detectDomChanges(): void;
    onDomChanges(): void;
    setDimensions(): void;
    getFile(index: any): any;
    handleTouchstart: (event: any) => void;
    handleHorizontalSwipe: (event: any) => void;
    handleTouchend: (event: any) => void;
    handleTransitionendCellContainer(event: any): void;
    toggleVideo(video: any): void;
    getCurrentIndex(): any;
    getCellWidth(): any;
    next(): void;
    prev(): void;
    select(index: number): void;
    isNextArrowDisabled(): any;
    isPrevArrowDisabled(): any;
    getCellLength(): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CarouselComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CarouselComponent, "carousel, [carousel]", ["carousel"], { "height": "height"; "loop": "loop"; "autoplay": "autoplay"; "autoplayInterval": "autoplayInterval"; "pauseOnHover": "pauseOnHover"; "dots": "dots"; "margin": "margin"; "objectFit": "objectFit"; "minSwipeDistance": "minSwipeDistance"; "transitionDuration": "transitionDuration"; "transitionTimingFunction": "transitionTimingFunction"; "counterSeparator": "counterSeparator"; "overflowCellsLimit": "overflowCellsLimit"; "listeners": "listeners"; "cellsToScroll": "cellsToScroll"; "arrows": "arrows"; "arrowsTheme": "arrowsTheme"; "images": "images"; "cellWidth": "cellWidth"; "isCounter": "counter"; "width": "width"; "borderRadius": "borderRadius"; "videoProperties": "videoProperties"; "cellsToShow": "cellsToShow"; "arrowsOutside": "arrowsOutside"; }, { "events": "events"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNhcm91c2VsLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSW1hZ2VzIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2Fyb3VzZWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmO1xyXG4gICAgcHJpdmF0ZSByZWY7XHJcbiAgICBnZXQgaXNDb250YWluZXJMb2NrZWQoKTogYW55O1xyXG4gICAgZ2V0IHNsaWRlQ291bnRlcigpOiBhbnk7XHJcbiAgICBnZXQgcHJldmlvdXNTbGlkZUNvdW50ZXIoKTogYW55O1xyXG4gICAgZ2V0IGxhcENvdW50ZXIoKTogYW55O1xyXG4gICAgbGluZVVwQ2VsbHMoKTogdm9pZDtcclxuICAgIHF1aWNrbHlQb3NpdGlvbkNvbnRhaW5lcigpOiB2b2lkO1xyXG4gICAgX2lkOiBzdHJpbmc7XHJcbiAgICBfaW1hZ2VzOiBJbWFnZXM7XHJcbiAgICB0b3VjaGVzOiBhbnk7XHJcbiAgICBjYXJvdXNlbDogYW55O1xyXG4gICAgbGFuZHNjYXBlTW9kZTogYW55O1xyXG4gICAgbWluVGltZW91dDogbnVtYmVyO1xyXG4gICAgaXNWaWRlb1BsYXlpbmc6IGJvb2xlYW47XHJcbiAgICBfaXNDb3VudGVyOiBib29sZWFuO1xyXG4gICAgX3dpZHRoOiBudW1iZXI7XHJcbiAgICBfY2VsbFdpZHRoOiBudW1iZXIgfCAnMTAwJSc7XHJcbiAgICBpc01vdmluZzogYm9vbGVhbjtcclxuICAgIGlzTmdDb250ZW50OiBib29sZWFuO1xyXG4gICAgY2VsbExlbmd0aDogbnVtYmVyO1xyXG4gICAgZG90c0FycjogYW55O1xyXG4gICAgZ2V0IGlzTGFuZHNjYXBlKCk6IGJvb2xlYW47XHJcbiAgICBnZXQgaXNTYWZhcmkoKTogYW55O1xyXG4gICAgZ2V0IGNvdW50ZXIoKTogc3RyaW5nO1xyXG4gICAgZ2V0IGNlbGxzRWxlbWVudCgpOiBhbnk7XHJcbiAgICBzZXQgaW1hZ2VzKGltYWdlczogSW1hZ2VzICYgYW55KTtcclxuICAgIGdldCBpbWFnZXMoKTogSW1hZ2VzICYgYW55O1xyXG4gICAgZXZlbnRzOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIGhlaWdodDogbnVtYmVyO1xyXG4gICAgd2lkdGg6IG51bWJlcjtcclxuICAgIGxvb3A6IGJvb2xlYW47XHJcbiAgICBhdXRvcGxheTogYm9vbGVhbjtcclxuICAgIGF1dG9wbGF5SW50ZXJ2YWw6IG51bWJlcjtcclxuICAgIHBhdXNlT25Ib3ZlcjogYm9vbGVhbjtcclxuICAgIGRvdHM6IGJvb2xlYW47XHJcbiAgICBib3JkZXJSYWRpdXM6IG51bWJlcjtcclxuICAgIG1hcmdpbjogbnVtYmVyO1xyXG4gICAgb2JqZWN0Rml0OiAnY29udGFpbicgfCAnY292ZXInIHwgJ25vbmUnO1xyXG4gICAgbWluU3dpcGVEaXN0YW5jZTogbnVtYmVyO1xyXG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uOiBudW1iZXI7XHJcbiAgICB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb246ICdlYXNlJyB8ICdlYXNlLWluJyB8ICdlYXNlLW91dCcgfCAnZWFzZS1pbi1vdXQnIHwgJ2xpbmVhcic7XHJcbiAgICB2aWRlb1Byb3BlcnRpZXM6IGFueTtcclxuICAgIGNvdW50ZXJTZXBhcmF0b3I6IHN0cmluZztcclxuICAgIG92ZXJmbG93Q2VsbHNMaW1pdDogbnVtYmVyO1xyXG4gICAgbGlzdGVuZXJzOiAnYXV0bycgfCAnbW91c2UgYW5kIHRvdWNoJztcclxuICAgIGNlbGxzVG9TaG93OiBudW1iZXI7XHJcbiAgICBjZWxsc1RvU2Nyb2xsOiBudW1iZXI7XHJcbiAgICBzZXQgY2VsbFdpZHRoKHZhbHVlOiBudW1iZXIgfCAnMTAwJScpO1xyXG4gICAgc2V0IGlzQ291bnRlcih2YWx1ZTogYm9vbGVhbik7XHJcbiAgICBnZXQgaXNDb3VudGVyKCk6IGJvb2xlYW47XHJcbiAgICBnZXQgYWN0aXZlRG90SW5kZXgoKTogbnVtYmVyO1xyXG4gICAgYXJyb3dzOiBib29sZWFuO1xyXG4gICAgYXJyb3dzT3V0c2lkZTogYm9vbGVhbjtcclxuICAgIGFycm93c1RoZW1lOiAnbGlnaHQnIHwgJ2RhcmsnO1xyXG4gICAgZ2V0IGNlbGxMaW1pdCgpOiBhbnk7XHJcbiAgICBob3N0Q2xhc3NDYXJvdXNlbDogYm9vbGVhbjtcclxuICAgIGhvc3RTdHlsZUhlaWdodDogc3RyaW5nO1xyXG4gICAgaG9zdFN0eWxlV2lkdGg6IHN0cmluZztcclxuICAgIG9uV2luZG93UmVzaXplKGV2ZW50OiBhbnkpOiB2b2lkO1xyXG4gICAgb25Nb3VzZW1vdmUoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xyXG4gICAgb25Nb3VzZWxlYXZlKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcclxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xyXG4gICAgbmdPbkluaXQoKTogdm9pZDtcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG4gICAgaW5pdENhcm91c2VsKCk6IHZvaWQ7XHJcbiAgICBkZXRlY3REb21DaGFuZ2VzKCk6IHZvaWQ7XHJcbiAgICBvbkRvbUNoYW5nZXMoKTogdm9pZDtcclxuICAgIHNldERpbWVuc2lvbnMoKTogdm9pZDtcclxuICAgIGdldEZpbGUoaW5kZXg6IGFueSk6IGFueTtcclxuICAgIGhhbmRsZVRvdWNoc3RhcnQ6IChldmVudDogYW55KSA9PiB2b2lkO1xyXG4gICAgaGFuZGxlSG9yaXpvbnRhbFN3aXBlOiAoZXZlbnQ6IGFueSkgPT4gdm9pZDtcclxuICAgIGhhbmRsZVRvdWNoZW5kOiAoZXZlbnQ6IGFueSkgPT4gdm9pZDtcclxuICAgIGhhbmRsZVRyYW5zaXRpb25lbmRDZWxsQ29udGFpbmVyKGV2ZW50OiBhbnkpOiB2b2lkO1xyXG4gICAgdG9nZ2xlVmlkZW8odmlkZW86IGFueSk6IHZvaWQ7XHJcbiAgICBnZXRDdXJyZW50SW5kZXgoKTogYW55O1xyXG4gICAgZ2V0Q2VsbFdpZHRoKCk6IGFueTtcclxuICAgIG5leHQoKTogdm9pZDtcclxuICAgIHByZXYoKTogdm9pZDtcclxuICAgIHNlbGVjdChpbmRleDogbnVtYmVyKTogdm9pZDtcclxuICAgIGlzTmV4dEFycm93RGlzYWJsZWQoKTogYW55O1xyXG4gICAgaXNQcmV2QXJyb3dEaXNhYmxlZCgpOiBhbnk7XHJcbiAgICBnZXRDZWxsTGVuZ3RoKCk6IGFueTtcclxufVxyXG4iXX0=